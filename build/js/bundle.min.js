// toma el servicio que quiero añadir
function agregarServicio(servicio) {
  const { servicios } = cita

  // tomo una copia de los servicios del objeto cita para no mutarlo
  cita.servicios = [...servicios, servicio]
}

// toma un id del servicio que quiero eliminar
function eliminarServicio(id) {
  const { servicios } = cita

  cita.servicios = servicios.filter(servicio => (
    servicio.id !== id
  ))
}
let pagina = 1
const cita = {
  nombre: "",
  fecha: "",
  hora: "",
  servicios: []
}

document.addEventListener("DOMContentLoaded", () => {
  iniciarApp()
})

function iniciarApp() {

  mostrarServicios()

  // resalta el div actual segun el tab al que se presiona
  mostrarSeccion()

  // oculta o muestra la seccion segun el tab al que se presiona
  cambiarSeccion()

  // pagina siguiente
  mostrarPaginaSiguiente()

  // pagina anterior
  mostrarPaginaAnterior()

  // comprueba la pagina para mostrar u ocultar la paginacion
  mostrarBotonesPaginacion()

  // Muestra el resumen de la cita (o un mensaje de error en caso de no pasar la validacion)
  mostrarResumen()

  almacenarNombreCita()

  almacenarFechaCita()

  deshabilitarFechaAnterior()

  almacenarHoraCita()
}
function cambiarSeccion() {
  const tabs = document.querySelectorAll(".tabs button")

  tabs.forEach(tab => {
    tab.addEventListener("click", e => {
      // cambio el numero de la pagina
      pagina = parseInt(e.target.dataset.paso)

      // llamar a la funcion mostrarSeccion
      mostrarSeccion()
      mostrarBotonesPaginacion()
    })
  });
}

function mostrarPaginaSiguiente() {
  const paginaSiguiente = document.getElementById("siguiente")
  paginaSiguiente.addEventListener("click", () => {
    pagina++;
    mostrarBotonesPaginacion()
  })
}

function mostrarPaginaAnterior() {
  const paginaAnterior = document.getElementById("anterior")
  paginaAnterior.addEventListener("click", () => {
    pagina--;
    mostrarBotonesPaginacion()
  })
}

function mostrarBotonesPaginacion() {
  const paginaAnterior = document.getElementById("anterior")
  const paginaSiguiente = document.getElementById("siguiente")

  if (pagina === 1) {
    paginaAnterior.classList.add("ocultar")
  } else if (pagina === 3) {
    paginaSiguiente.classList.add("ocultar")
    paginaAnterior.classList.remove("ocultar")
    mostrarResumen() // estoy en la pagina 3, carga el resumen de la cita

  } else {
    paginaAnterior.classList.remove("ocultar")
    paginaSiguiente.classList.remove("ocultar")
  }
  mostrarSeccion() // cambia la seccion que se muestra por la de la pagina
}
function almacenarNombreCita() {
  const nombreInput = document.getElementById("nombre")

  nombreInput.addEventListener("input", e => {
    // trim() elimina los espacios al principio y al final
    const nombreTexto = e.target.value.trim()

    if (nombreTexto === "" || nombreTexto.length <= 3) {
      mostrarAlerta("Nombre no válido", "error")
    } else {
      const alerta = document.querySelector(".alerta")
      if (alerta) {
        alerta.remove()
      }
      cita.nombre = nombreTexto
    }
  })
}

function almacenarFechaCita() {
  const fechaInput = document.getElementById("fecha")

  fechaInput.addEventListener("input", e => {
    // retorna un numero que representa el dia siendo domingo el 0 y sabado el 6
    const dia = new Date(e.target.value).getUTCDay()

    if ([0, 6].includes(dia)) {
      fechaInput.value = ""
      mostrarAlerta("No se aceptan citas los Fines de Semana", "error")
    } else {
      cita.fecha = fechaInput.value
    }
  })
}

function almacenarHoraCita() {
  const horaInput = document.getElementById("hora")
  horaInput.addEventListener("change", e => {
    const horaCita = e.target.value
    const hora = horaCita.split(":")

    if (hora[0] < 10 || (hora[0] >= 22 && hora[1] > 0) ) {
      setTimeout(() => {
        horaInput.value = ""
      }, 1000);
      mostrarAlerta("Ya no se aceptan citan", "error")
    } else {
      cita.hora = horaCita
    }
  })
}

function mostrarAlerta(mensaje, tipo) {

  // si hay una alerta previa, entonces no crear otra
  const alertaPrevia = document.querySelector(".alerta")
  if (alertaPrevia) {
    return
  }

  const alerta = document.createElement("DIV")
  alerta.classList.add("alerta")
  alerta.textContent = mensaje

  if (tipo === "error") {
    alerta.classList.add("error")
  }

  // inserto la alerta en el HTML
  const formulario = document.querySelector(".formulario")
  formulario.appendChild(alerta)

  // elimino la alerta despues de 3 segundos
  setTimeout(() => {
    alerta.remove()
  }, 3000);
}

function deshabilitarFechaAnterior() {
  const fechaInput = document.getElementById("fecha")
  const fechaActual = new Date()
  const year = fechaActual.getFullYear()
  let mes = fechaActual.getMonth() + 1 // +1 porque esto es un array asi que su indice comienza desde 0

  if (mes < 10) {
    mes = "0" + mes
  }

  const dia = fechaActual.getDate() + 1
  // formato deseado: aaaa-mm-dd
  const fechaDeshabilitada = `${year}-${mes}-${dia}`

  fechaInput.min = fechaDeshabilitada
}

function mostrarResumen() {
  // destructuring
  const { nombre, fecha, servicios, hora } = cita
  const resumen = document.querySelector(".contenido-resumen")

  // limpio el html previo
  resumen.innerHTML = ""

  // validacion de objeto
  if (Object.values(cita).includes("")) {
    const sinCita = document.createElement("P")
    sinCita.textContent = "Faltan servicios, fecha, hora o nombre"
    sinCita.classList.add("invalidar-cita")
    resumen.append(sinCita)

    return
  }

  const serviciosCita = document.createElement("DIV")
  serviciosCita.classList.add("resumen-servicios")

  servicios.forEach(servicio => {

    const { nombre, precio } = servicio
    const contenedorServicio = document.createElement("DIV")
    contenedorServicio.classList.add("contenedor-servicio")

    const nombreServicio = document.createElement("P")
    nombreServicio.classList.add("nombre-servicio")
    nombreServicio.textContent = nombre

    const precioServicio = document.createElement("P")
    precioServicio.classList.add("precio-servicio")
    precioServicio.textContent = precio

    contenedorServicio.append(nombreServicio, precioServicio)
    serviciosCita.appendChild(contenedorServicio)
  });
  
  const nombreCita = document.createElement("P")
  nombreCita.innerHTML = `<span>Nombre: </span>${nombre}`
  
  const fechaCita = document.createElement("P")
  fechaCita.innerHTML = `<span>Fecha: </span>${fecha}`
  
  const horaCita = document.createElement("P")
  horaCita.innerHTML = `<span>Hora: </span>${hora}`

  resumen.append(nombreCita, fechaCita, horaCita, serviciosCita)
}
function mostrarSeccion() {

  // eliminar la seccion anterior
  const seccionAnterior = document.querySelector(".mostrar-seccion")
  if (seccionAnterior) {
    seccionAnterior.classList.remove("mostrar-seccion")
  }

  const seccion = document.getElementById(`paso-${pagina}`)
  seccion.classList.add("mostrar-seccion")

  // elimina la clase .actual del tab anterior
  const tabAnterior = document.querySelector(".tabs button.actual")
  if (tabAnterior) {
    tabAnterior.classList.remove("actual")
  }

  // resalta el tab actual
  const tab = document.querySelector(`[data-paso="${pagina}"]`)
  tab.classList.add("actual")
}
async function mostrarServicios() {

  try {
    const respuesta = await fetch("./servicios.json")
    const db = await respuesta.json()

    const { servicios } = db

    // generar html
    servicios.forEach(servicio => {
      const { id, nombre, precio } = servicio

      // dom scripting
      const nombreServicio = document.createElement("P")
      nombreServicio.textContent = nombre
      nombreServicio.classList.add("nombre-sevicio")

      const precioServicio = document.createElement("P")
      precioServicio.textContent = `$${precio}`
      precioServicio.classList.add("precio-sevicio")

      const servicioDiv = document.createElement("DIV")
      servicioDiv.append(nombreServicio, precioServicio)
      servicioDiv.classList.add("servicio")
      servicioDiv.dataset.idServicio = id

      // seleccionar los servicios
      servicioDiv.onclick = seleccionarServicio

      // agrego mi div al html
      const listadoServicios = document.querySelector(".listado-servicios")
      listadoServicios.appendChild(servicioDiv)
    });

  } catch (error) {
    console.error(error);
  }
}

function seleccionarServicio(e) {

  let elemento

  // forzar que el elemento al cual le de click sea un div
  if (e.target.tagName === "P") {
    elemento = e.target.parentElement
  } else {
    elemento = e.target
  }



  if (elemento.classList.contains("seleccionado")) {
    elemento.classList.remove("seleccionado")

    const id = parseInt(elemento.dataset.idServicio)

    eliminarServicio(id)
    
  } else {
    elemento.classList.add("seleccionado")

    const objServicio = {
      id: parseInt(elemento.dataset.idServicio),
      nombre: elemento.firstElementChild.textContent, // retorna el primer hijo
      precio: elemento.firstElementChild.nextElementSibling.textContent // retorna el hermano del primer hijo
    }

    agregarServicio(objServicio)
  }
}
//# sourceMappingURL=bundle.js.map
